name: post-release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  BIN_NAME: dyson
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Create GitHub release
        id: release
        uses: softprops/action-gh-release@v1
  build-release:
    name: build-release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos]
        include:
          - build: linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool libssl-dev
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Build release binary
        run: cargo build --target ${{ matrix.target }} --verbose --release
      - name: Build archive
        shell: bash
        run: |
          outdir="./target/${{ env.TARGET_DIR }}/release"
          staging="${{ env.BIN_NAME }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"/{complete,doc}
          cp {README.md,LICENSE-*} "$staging/"
          cp {CHANGELOG.md,docs/*} "$staging/doc/"
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
          tar czf "$staging.tar.gz" -C "$staging" .
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
